plugins {
  id 'java'
  id 'java-library'
  id 'org.springframework.boot' version '3.1.1'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.graalvm.buildtools.native' version '0.9.23'
  id 'pl.allegro.tech.build.axion-release' version '1.15.1'
  id("io.github.gradle-nexus.publish-plugin") version '1.3.0'
  id 'maven-publish'
  id 'signing'
}

apply plugin: 'java'

group = 'org.springframework.samples'
version = '3.1.0'
sourceCompatibility = '17'

repositories {
    maven {
        url "http://localhost:8081/repository/gradle-proxy"
        allowInsecureProtocol = true
    }
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.2.3"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
}

tasks.named('test') {
  useJUnitPlatform()
}

task custom{
    dependsOn 'build'
    doLast {
        def reportPath = project.file('build/reports/tests/test/index.html')
        def reportUri = reportPath.toURI()
        java.awt.Desktop.getDesktop().browse(reportUri)
    }
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            credentials {
                username "admin"
                password "admin"
            }

            if(version.endsWith('SNAPSHOT')) {
                url "http://localhost:8081/repository/gradle-snapshots"
            } else {
                url "http://localhost:8081/repository/gradle-releases"
            }

            allowInsecureProtocol = true
        }
    }
}

scmVersion {
    tag {
        prefix.set("spring-petclinic-")
    }
    nextVersion {
        suffix.set("SNAPSHOT")
    }
}
//nexusPublishing {
//    repositories {
//        myNexus {
//            nexusUrl = uri("http://localhost:8081/repository/gradle-releases")
//            snapshotRepositoryUrl = uri("http://localhost:8081/repository/gradle-snapshots")
//            username = "admin"
//            password = "admin"
//        }
//    }
//}
